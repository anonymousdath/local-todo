{"version":3,"sources":["components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoApp","state","input","items","JSON","parse","localStorage","getItem","handleChange","event","setState","target","value","handleSubmit","preventDefault","handleDelete","key","filter","index","handleEdit","text","temp","map","data","this","setItem","stringify","className","onSubmit","placeholder","type","onChange","e","aria-hidden","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAEqBA,G,kNACnBC,MAAQ,CACNC,MAAO,GACPC,MAAOC,KAAKC,MAAMC,aAAaC,QAAQ,SACnCH,KAAKC,MAAMC,aAAaC,QAAQ,SAChC,I,EAGNC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAER,MAAOO,EAAME,OAAOC,S,EAGtCC,aAAe,SAACJ,GACdA,EAAMK,iBADkB,MAEC,EAAKb,MAAtBC,EAFgB,EAEhBA,MAAOC,EAFS,EAETA,MACD,KAAVD,GACF,EAAKQ,SAAS,CACZP,MAAM,GAAD,mBAAMA,GAAN,CAAaD,IAClBA,MAAO,M,EAKba,aAAe,SAACC,GACd,EAAKN,SAAS,CACZP,MAAO,EAAKF,MAAME,MAAMc,QAAO,SAACL,EAAOM,GAAR,OAAkBA,IAAUF,Q,EAI/DG,WAAa,SAACC,EAAMJ,GAClB,IAAIK,EAAO,GACX,EAAKpB,MAAME,MAAMmB,KAAI,SAACC,EAAML,GAI1B,OAFEG,EAAKH,GADHA,IAAUF,EACEI,EACKG,EACd,KAET,EAAKb,SAAS,CACZP,MAAM,GAAD,OAAMkB,M,uDAGL,IAAD,SACkBG,KAAKvB,MAAtBC,EADD,EACCA,MAAOC,EADR,EACQA,MAEf,OADAG,aAAamB,QAAQ,OAAQrB,KAAKsB,UAAUvB,IAE1C,yBAAKwB,UAAU,kBACb,0BAAMA,UAAU,kBAAkBC,SAAUJ,KAAKX,cAC/C,wCAEA,2BACED,MAAOV,EACP2B,YAAY,gBACZC,KAAK,OACLC,SAAUP,KAAKhB,gBAGnB,yBAAKmB,UAAU,kBACb,4BACGxB,EAAMmB,KAAI,SAACC,EAAML,GAChB,OACE,wBAAIF,IAAKE,GACP,2BACES,UAAU,aACVG,KAAK,OACLlB,MAAOW,EACPQ,SAAU,SAACC,GAAD,OAAO,EAAKb,WAAWa,EAAErB,OAAOC,MAAOM,MAEnD,uBACES,UAAU,cACVM,cAAY,OACZC,QAAS,kBAAM,EAAKnB,aAAaG,iB,GAtEhBiB,cCUtBC,MARf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,QCKcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.287f1f84.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./TodoApp.css\";\nexport default class TodoApp extends Component {\n  state = {\n    input: \"\",\n    items: JSON.parse(localStorage.getItem(\"todo\"))\n      ? JSON.parse(localStorage.getItem(\"todo\"))\n      : [],\n  };\n\n  handleChange = (event) => {\n    this.setState({ input: event.target.value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { input, items } = this.state;\n    if (input !== \"\") {\n      this.setState({\n        items: [...items, input],\n        input: \"\",\n      });\n    }\n  };\n\n  handleDelete = (key) => {\n    this.setState({\n      items: this.state.items.filter((value, index) => index !== key),\n    });\n  };\n\n  handleEdit = (text, key) => {\n    let temp = [];\n    this.state.items.map((data, index) => {\n      if (index === key) {\n        temp[index] = text;\n      } else temp[index] = data;\n      return 0;\n    });\n    this.setState({\n      items: [...temp],\n    });\n  };\n  render() {\n    const { input, items } = this.state;\n    localStorage.setItem(\"todo\", JSON.stringify(items));\n    return (\n      <div className=\"todo-container\">\n        <form className=\"input-container\" onSubmit={this.handleSubmit}>\n          <h1>Todo App</h1>\n\n          <input\n            value={input}\n            placeholder=\"Enter here...\"\n            type=\"text\"\n            onChange={this.handleChange}\n          ></input>\n        </form>\n        <div className=\"list-container\">\n          <ul>\n            {items.map((data, index) => {\n              return (\n                <li key={index}>\n                  <input\n                    className=\"list-input\"\n                    type=\"text\"\n                    value={data}\n                    onChange={(e) => this.handleEdit(e.target.value, index)}\n                  />\n                  <i\n                    className=\"fa fa-trash\"\n                    aria-hidden=\"true\"\n                    onClick={() => this.handleDelete(index)}\n                  ></i>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoApp from \"./components/TodoApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}